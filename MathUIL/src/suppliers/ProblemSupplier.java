package suppliers;

import java.util.*;
import java.util.function.Supplier;

import base.*;
import problems.*;
import utils.Ref;

/**
 * <p>An interface that all classes which will generate {@link Problem Problems} must implement in order for their problems
 * to be displayed to the user.</p>
 * 
 * <p>{@link ProblemSupplier ProblemSuppliers} may optionally have {@link #settings() settings}. These settings can be
 * adjusted by the user. An example of a setting would be the amount of terms in an {@link AdditionProblem}. A
 * {@link ProblemSupplier ProblemSupplier's} settings are returned as a {@link Collection} of {@link Ref Refs}.</p>
 * 
 * <p><b>Implementation note:</b> In order for a setting to be displayed to and adjusted by the user, it must be of a
 * {@link Ref} subtype that is supported by {@link SettingTitledPane#displayNodeForRef(Ref)}</p>
 * @author Sam Hooper
 */
@FunctionalInterface
public interface ProblemSupplier extends Supplier<Problem> {
	
	default Collection<Ref> settings() {
		return Collections.emptySet();
	}
	
	/**
	 * Returns a {@link Problem} generated by this {@link ProblemSupplier}. The {@link Problem Problems} may be generated on-demand
	 * or in advance. {@link ProblemSupplier ProblemSuppliers} should not produce the same problem every time.
	 */
	@Override
	public Problem get();
}
