package suppliers;

import java.lang.annotation.Annotation;
import java.lang.reflect.*;
import java.util.*;
import java.util.function.Supplier;
import java.util.regex.Pattern;

import base.*;
import problems.*;
import utils.EnumSetView;
import utils.refs.Ref;

/**
 * <p>An interface that all classes which will generate {@link Problem Problems} must implement in order for their problems
 * to be displayed to the user.</p>
 * 
 * <p>{@link ProblemSupplier ProblemSuppliers} may optionally have {@link #settings() settings}. These settings can be
 * adjusted by the user. An example of a setting would be the amount of terms in an {@link IntAddSubtract}. A
 * {@link ProblemSupplier ProblemSupplier's} settings are returned as a {@link Collection} of {@link Ref Refs}.</p>
 * 
 * <p><b>Implementation note:</b> In order for a setting to be displayed to and adjusted by the user, it must be of a
 * {@link Ref} subtype that is supported by {@link SettingTitledPane#displayNodeForRef(Ref)}</p>
 * @author Sam Hooper
 */
@FunctionalInterface
public interface ProblemSupplier extends Supplier<Problem> {
	
	EnumSetView<SupplierMode> RANDOM_ONLY = EnumSetView.of(EnumSet.of(SupplierMode.RANDOM));

	static ProblemSupplier from(final String displayName, final Supplier<? extends Problem> supplier) {
		return new ProblemSupplier() {
			
			@Override
			public Problem get() {
				return supplier.get();
			}

			@Override
			public String getName() {
				return displayName;
			}
			
		};
	}
	
	/** {@link Pattern} that matches locations where a space (' ') should be placed when generating a default
	 * name from the class name of a {@code ProblemSupplier} (used in {@link #getNameFromClass(Class)}).*/
	Pattern SPACE_LOCATIONS_IN_SUPPLIER_CLASSNAME = Pattern.compile("(?<![A-Z])(?=[A-Z])|(?<!\\d)(?=\\d)");
	
	private static String getNameFromClass(Class<?> clazz) {
		final String simpleName = clazz.getSimpleName();
		final String usedPortion = simpleName.substring(0, simpleName.lastIndexOf("Supplier"));
		return SPACE_LOCATIONS_IN_SUPPLIER_CLASSNAME.matcher(usedPortion).replaceAll(" ");
	}
	
	/**
	 * Returns a {@link Problem} generated by this {@link ProblemSupplier}. The {@link Problem Problems} may be generated on-demand
	 * or in advance. {@link ProblemSupplier ProblemSuppliers} should not produce the same problem every time.
	 */
	@Override
	public Problem get();
	
	default List<Ref> settings() {
		return Collections.emptyList();
	}
	
	default String getName() {
		return getNameFromClass(getClass());
	}
	
	/** Returns {@code true} if this {@link ProblemSupplier} supports the given {@link SupplierMode}. Every {@code ProblemSupplier} supports
	 * {@link SupplierMode#RANDOM}, but some may support other modes, such as {@link SupplierMode#STACKED}. */
	default boolean supports(SupplierMode mode) {
		return getSupportedModes().contains(mode);
	}
	
	default SupplierMode getCurrentMode() {
		return SupplierMode.RANDOM;
	}
	
	default EnumSetView<SupplierMode> getSupportedModes() {
		return RANDOM_ONLY;
	}
}
